<?xml version="1.0"?>
<robot name="rgbd_sensor" xmlns:xacro="http://ros.org/wiki/xacro">
    <xacro:property name="rgbd_fov" value="${60.0*M_PI/180.0}"/>
    <xacro:property name="rgbd_width" value="640"/>
    <xacro:property name="rgbd_height" value="480"/>
  <!-- Microsoft Kinect for simulation -->
    <xacro:macro name="rgbd_sensor_sim">
        <gazebo>
            <plugin filename="gz-sim-sensors-system" name="gz::sim::systems::Sensors">
                <render_engine>ogre2</render_engine>
            </plugin>
        </gazebo>
        <gazebo reference="camera_link">
            <sensor name="camera" type="rgbd_camera">
                <camera>
                    <horizontal_fov>${rgbd_fov}</horizontal_fov>
                    <image>
                        <width>${rgbd_width}</width>
                        <height>${rgbd_height}</height>
                        <format>RGB_INT8</format>
                    </image>
                    <clip>
                        <near>0.05</near>
                        <far>12.0</far>
                    </clip>
                    <depth_camera>
                        <clip>
                            <near>0.05</near>
                            <far>12.0</far>
                        </clip>
                    </depth_camera>
                    <distortion>
                        <k1>0.0</k1>
                        <k2>0.0</k2>
                        <k3>0.0</k3>
                        <p1>0.0</p1>
                        <p2>0.0</p2>
                        <center>0.5 0.5</center>
                    </distortion>
                    <lens>
                        <intrinsics>
                            <!-- fx = fy = width / ( 2 * tan (hfov / 2 ) ) -->
                            <fx>${rgbd_width / 2 * (0.5769)}</fx>
                            <fy>${rgbd_width / 2 * (0.5769)}</fy>
                            <!-- cx = ( width + 1 ) / 2 -->
                            <cx>${(rgbd_width + 1)/2}</cx>
                            <!-- cy = ( height + 1 ) / 2 -->
                            <cy>${(rgbd_height + 1)/2}</cy>
                            <s>0</s>
                        </intrinsics>
                        <projection>
                            <p_fx>${rgbd_width / 2 * (0.5769)}</p_fx>
                            <p_fy>${rgbd_width / 2 * (0.5769)}</p_fy>
                            <p_cx>${(rgbd_width + 1)/2}</p_cx>
                            <p_cy>${(rgbd_height + 1)/2}</p_cy>
                            <tx>0</tx>
                            <ty>0</ty>
                        </projection>
                    </lens>
                    <noise>
                        <type>gaussian</type>
                        <mean>0</mean>
                        <stddev>0.007</stddev>
                    </noise>
                </camera>
                <always_on>1</always_on>
                <update_rate>5</update_rate>
                <visualize>false</visualize>
                <topic>kinect_rgbd_camera</topic>
                <enable_metrics>true</enable_metrics>
            </sensor>
        </gazebo>
    </xacro:macro>
</robot>
